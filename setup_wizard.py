#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Setup Wizard for YouTube Downloader Bot
This script helps users configure the bot for the first time by creating .env file
"""

import os
import sys
from pathlib import Path
from typing import Optional


class SetupWizard:
    def __init__(self):
        self.env_path = Path('.env')
        self.required_vars = ['API_ID', 'API_HASH', 'BOT_TOKEN']
        
    def check_env_exists(self) -> bool:
        """Check if .env file exists and contains required variables"""
        if not self.env_path.exists():
            return False
            
        try:
            with open(self.env_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Check if all required variables exist
            for var in self.required_vars:
                if f'{var}=' not in content:
                    return False
                    
            return True
        except Exception as e:
            print(f"خطا در خواندن فایل .env: {e}")
            return False
    
    def get_user_input(self, prompt: str, required: bool = True, hide_input: bool = False) -> Optional[str]:
        """Get input from user with validation"""
        import getpass
        
        while True:
            if hide_input:
                value = getpass.getpass(prompt)
            else:
                value = input(prompt).strip()
                
            if not value and required:
                print("❌ این فیلد اجباری است. لطفاً مقدار وارد کنید.")
                continue
                
            return value if value else None
    
    def validate_api_id(self, api_id: str) -> bool:
        """Validate API_ID format"""
        try:
            int(api_id)
            return len(api_id) >= 6
        except ValueError:
            return False
    
    def validate_bot_token(self, token: str) -> bool:
        """Validate BOT_TOKEN format"""
        # Basic validation: should contain ':' and be long enough
        return ':' in token and len(token) > 20
    
    def create_env_file(self, config: dict) -> bool:
        """Create .env file with provided configuration"""
        try:
            env_content = f"""# YouTube Downloader Bot Configuration
# Generated by Setup Wizard

# Telegram API Configuration
API_ID={config['API_ID']}
API_HASH={config['API_HASH']}
BOT_TOKEN={config['BOT_TOKEN']}

# Optional: Session file path (default: current directory)
SESSION_PATH={config.get('SESSION_PATH', '.')}

# Bot Configuration
DOWNLOAD_LOCATION=./downloads
MAX_WORKERS=8

# Database Configuration
DB_PATH=./plugins/bot_database.db
"""
            
            with open(self.env_path, 'w', encoding='utf-8') as f:
                f.write(env_content)
                
            # Set appropriate permissions (readable only by owner)
            os.chmod(self.env_path, 0o600)
            
            return True
            
        except Exception as e:
            print(f"❌ خطا در ایجاد فایل .env: {e}")
            return False
    
    def run_wizard(self) -> bool:
        """Run the setup wizard"""
        print("\n" + "="*60)
        print("🚀 خوش آمدید به راه‌انداز ربات دانلودر یوتیوب")
        print("="*60)
        print("\nبرای راه‌اندازی ربات، لطفاً اطلاعات زیر را وارد کنید:")
        print("\n📋 راهنمای دریافت اطلاعات:")
        print("• API_ID و API_HASH: از https://my.telegram.org دریافت کنید")
        print("• BOT_TOKEN: از @BotFather در تلگرام دریافت کنید")
        print("\n" + "-"*60 + "\n")
        
        config = {}
        
        # Get API_ID
        while True:
            api_id = self.get_user_input("🔑 API_ID را وارد کنید: ")
            if self.validate_api_id(api_id):
                config['API_ID'] = api_id
                break
            else:
                print("❌ API_ID نامعتبر است. باید یک عدد حداقل 6 رقمی باشد.")
        
        # Get API_HASH
        while True:
            api_hash = self.get_user_input("🔐 API_HASH را وارد کنید: ")
            if len(api_hash) >= 32:
                config['API_HASH'] = api_hash
                break
            else:
                print("❌ API_HASH نامعتبر است. باید حداقل 32 کاراکتر باشد.")
        
        # Get BOT_TOKEN
        while True:
            bot_token = self.get_user_input("🤖 BOT_TOKEN را وارد کنید: ", hide_input=True)
            if self.validate_bot_token(bot_token):
                config['BOT_TOKEN'] = bot_token
                break
            else:
                print("❌ BOT_TOKEN نامعتبر است. فرمت صحیح: 123456789:ABCdefGHIjklMNOpqrSTUvwxyz")
        
        # Get optional session path
        session_path = self.get_user_input(
            "📁 مسیر ذخیره session (اختیاری، Enter برای پیش‌فرض): ", 
            required=False
        )
        if session_path:
            config['SESSION_PATH'] = session_path
        
        print("\n" + "-"*60)
        print("📝 در حال ایجاد فایل .env...")
        
        if self.create_env_file(config):
            print("✅ فایل .env با موفقیت ایجاد شد!")
            print("\n🎉 راه‌اندازی کامل شد! حالا می‌توانید ربات را اجرا کنید:")
            print("   python bot.py")
            print("\n⚠️  نکته امنیتی: فایل .env حاوی اطلاعات حساس است.")
            print("   آن را در GitHub یا سایر مخازن عمومی قرار ندهید.")
            return True
        else:
            print("❌ خطا در ایجاد فایل .env")
            return False
    
    def check_and_run(self) -> bool:
        """Check if setup is needed and run wizard if necessary"""
        if self.check_env_exists():
            print("✅ فایل .env موجود است و تنظیمات کامل است.")
            return True
        else:
            print("⚠️  فایل .env موجود نیست یا ناقص است.")
            response = input("آیا می‌خواهید راه‌انداز را اجرا کنید؟ (y/n): ").lower()
            if response in ['y', 'yes', 'بله', 'آره']:
                return self.run_wizard()
            else:
                print("❌ راه‌اندازی لغو شد.")
                return False


def run_setup_wizard():
    """تابع اصلی برای اجرای wizard تنظیمات"""
    wizard = SetupWizard()
    
    if wizard.check_env_exists():
        print("✅ فایل .env موجود است و تمام متغیرهای مورد نیاز تنظیم شده‌اند.")
        return True
    
    print("🚀 راه‌اندازی wizard تنظیمات...")
    success = wizard.run_wizard()
    
    if success:
        print("\n✅ تنظیمات با موفقیت کامل شد!")
        print("اکنون می‌توانید ربات را راه‌اندازی کنید.")
    else:
        print("\n❌ خطا در تنظیمات. لطفاً دوباره تلاش کنید.")
        sys.exit(1)
    
    return success

def main():
    """Main function to run setup wizard"""
    wizard = SetupWizard()
    
    try:
        success = wizard.check_and_run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n❌ راه‌اندازی توسط کاربر لغو شد.")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ خطای غیرمنتظره: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()